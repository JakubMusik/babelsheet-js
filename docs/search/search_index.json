{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About Babelsheet Babelsheet node service allows you to translate all of the UI / app content to specific language. As a user interface we use google spreadsheets and translations are synchronised every 5 minutes. This service contains a scheduler to synchronise translations, a web server allowing you to fetch them, and a CLI tools which can generate translations in various formats. What's more there is a cache layer for better performance. No more dealing with complicated paid translation services or problems with multiple users working at the same time! To run CLI Create configuration file . npm i -g babelsheet babelsheet generate To run API Create configuration file . Create docker-compose.yml . docker-compose up","title":"Getting started"},{"location":"#about-babelsheet","text":"Babelsheet node service allows you to translate all of the UI / app content to specific language. As a user interface we use google spreadsheets and translations are synchronised every 5 minutes. This service contains a scheduler to synchronise translations, a web server allowing you to fetch them, and a CLI tools which can generate translations in various formats. What's more there is a cache layer for better performance. No more dealing with complicated paid translation services or problems with multiple users working at the same time!","title":"About Babelsheet"},{"location":"#to-run-cli","text":"Create configuration file . npm i -g babelsheet babelsheet generate","title":"To run CLI"},{"location":"#to-run-api","text":"Create configuration file . Create docker-compose.yml . docker-compose up","title":"To run API"},{"location":"configuration/","text":"In order to start using babelsheet, you have to configure your .env file first. Configuration file CLIENT_ID= GOOGLE-CLIENT-ID CLIENT_SECRET= GOOGLE-CLIENT-SECRET SPREADSHEET_ID= SPREADSHEET-ID SPREADSHEET_NAME= SPREADSHEET-NAME REFRESH_TOKEN= REFRESH-TOKEN REDIRECT_URI=http://localhost:3000/oauth2callback REDIS_HOST=redis REDIS_PORT=6379 HOST=localhost PORT=3000 NODE_ENV=dev APP_NAME=babelsheet-node LOGGING_LEVEL=debug TRACING_SERVICE_HOST=localhost TRACING_SERVICE_PORT=6832 Configuration options CLIENT_ID * - client id received from Google ( how to config ) CLIENT_SECRET * - client secret received from Google ( how to config ) SPREADSHEET_ID * - spreadsheet ID from spreadsheet URL How to get spreadsheet ID Spreadsheet ID can be taken from spreadsheet url. It's the part after /d/ sign: https://docs.google.com/spreadsheets/d/ spreadsheet-id / SPREADSHEET_NAME * - sheet name How to get spreadsheet name Spreadsheet name is the name of the tab in spreadsheet document. REFRESH_TOKEN * - refresh token, generated by babelsheet-cli REDIRECT_URI - url to which user should be redirected after receiving refresh token REDIS_HOST - host name of redis store REDIS_PORT - port of redis store HOST - host name for winston PORT - API port NODE_ENV - environment type APP_NAME - name which indentify app LOGGING_LEVEL - Log level debug/error/info TRACING_SERVICE_HOST - Server open tracing host / jaeger server TRACING_SERVICE_PORT - Server open tracing port / jaeger server * - required Configuring Google Spreadsheet API Create account in Google Cloud Platform Create a project in Google Cloud Platform and enable Google Sheets API usage (section API Services dashboard) Go to section API Services Credentials, then OAuth consent screen and fill in the form with proper product name, e-mail address. In API Services Credentials add new credentials and choose OAuth client, then choose Other as a type and provide its name. You will be given Client ID and Client secret keys, use them in environment variables CLIENT_ID and CLIENT_SECRET in .env file. Generating refresh token To generate refresh token, you have to configure Google Spreadsheet API first. When CLIENT_ID and CLIENT_SECRET are stored in .env file, you are ready to generate refresh-token. Run babelsheet generate --config . If babelsheet is not installed, run npm i -g babelsheet to install. CLIENT_ID and CLIENT_SECRET as params You don't have to create .env file, you can pass CLIENT_ID and CLIENT_SECRET values as parameters to babelsheet: npm generate --config --client_id yours-client-id --client_secret yours-client-secret Config in json file You can also generate token in data.json file, just by passing json parameter option npm generate --config json . Browser window will be opened automatically. Log in into you Google account and then grant your application an access for reading spreadsheets in your account. You should be given a message Authentication successful! Please return to the console . Refresh token is now stored in .env file. You can change storage type here . More actions won't be needed because tokens will be refreshed automatically if necessary.","title":"Configuration"},{"location":"configuration/#configuration-file","text":"CLIENT_ID= GOOGLE-CLIENT-ID CLIENT_SECRET= GOOGLE-CLIENT-SECRET SPREADSHEET_ID= SPREADSHEET-ID SPREADSHEET_NAME= SPREADSHEET-NAME REFRESH_TOKEN= REFRESH-TOKEN REDIRECT_URI=http://localhost:3000/oauth2callback REDIS_HOST=redis REDIS_PORT=6379 HOST=localhost PORT=3000 NODE_ENV=dev APP_NAME=babelsheet-node LOGGING_LEVEL=debug TRACING_SERVICE_HOST=localhost TRACING_SERVICE_PORT=6832","title":"Configuration file"},{"location":"configuration/#configuration-options","text":"CLIENT_ID * - client id received from Google ( how to config ) CLIENT_SECRET * - client secret received from Google ( how to config ) SPREADSHEET_ID * - spreadsheet ID from spreadsheet URL How to get spreadsheet ID Spreadsheet ID can be taken from spreadsheet url. It's the part after /d/ sign: https://docs.google.com/spreadsheets/d/ spreadsheet-id / SPREADSHEET_NAME * - sheet name How to get spreadsheet name Spreadsheet name is the name of the tab in spreadsheet document. REFRESH_TOKEN * - refresh token, generated by babelsheet-cli REDIRECT_URI - url to which user should be redirected after receiving refresh token REDIS_HOST - host name of redis store REDIS_PORT - port of redis store HOST - host name for winston PORT - API port NODE_ENV - environment type APP_NAME - name which indentify app LOGGING_LEVEL - Log level debug/error/info TRACING_SERVICE_HOST - Server open tracing host / jaeger server TRACING_SERVICE_PORT - Server open tracing port / jaeger server * - required","title":"Configuration options"},{"location":"configuration/#configuring-google-spreadsheet-api","text":"Create account in Google Cloud Platform Create a project in Google Cloud Platform and enable Google Sheets API usage (section API Services dashboard) Go to section API Services Credentials, then OAuth consent screen and fill in the form with proper product name, e-mail address. In API Services Credentials add new credentials and choose OAuth client, then choose Other as a type and provide its name. You will be given Client ID and Client secret keys, use them in environment variables CLIENT_ID and CLIENT_SECRET in .env file.","title":"Configuring Google Spreadsheet API"},{"location":"configuration/#generating-refresh-token","text":"To generate refresh token, you have to configure Google Spreadsheet API first. When CLIENT_ID and CLIENT_SECRET are stored in .env file, you are ready to generate refresh-token. Run babelsheet generate --config . If babelsheet is not installed, run npm i -g babelsheet to install. CLIENT_ID and CLIENT_SECRET as params You don't have to create .env file, you can pass CLIENT_ID and CLIENT_SECRET values as parameters to babelsheet: npm generate --config --client_id yours-client-id --client_secret yours-client-secret Config in json file You can also generate token in data.json file, just by passing json parameter option npm generate --config json . Browser window will be opened automatically. Log in into you Google account and then grant your application an access for reading spreadsheets in your account. You should be given a message Authentication successful! Please return to the console . Refresh token is now stored in .env file. You can change storage type here . More actions won't be needed because tokens will be refreshed automatically if necessary.","title":"Generating refresh token"},{"location":"development/","text":"Set refresh token read providers You can set order of REFRESH_TOKEN providers in /src/services/producer/container.ts for producer, and in /src/services/cli/container.ts for CLI tool: readProviders: [ container.resolve InEnvStorage ('inEnvStorage'), container.resolve InFileStorage ('inFileStorage'), container.resolve InRedisStorage ('inRedisStorage'), ], First .env file will be checked does it contain REFRESH_TOKEN , if not, next data.json file will be checked, and the last one will be redis storage. Feel free to change order of those providers, or creating new ones. Set refresh token write provider You can set REFRESH_TOKEN write provider in /src/services/cli/container.ts for CLI tool, and in /src/services/producer/container.ts for producer. Notice that producer will only have ability to save REFRESH_TOKEN when you run it locally, not in docker container - browser window will be opened automatically. writeProvider: container.resolve InEnvStorage ('inEnvStorage'), You can change it to one of those three storages: container.resolve InEnvStorage ('inEnvStorage') container.resolve InFileStorage ('inFileStorage') container.resolve InRedisStorage ('inRedisStorage') Feel free to add new providers. Change translations storage from redis to file By default, translations as saved in redis storage. In order to change translations storage to file. Open /src/services/producer/container.ts and change: storage: awilix.asClass(InRedisStorage) to: storage: awilix.asClass(InFileStorage) Open /src/services/api/container.ts and change: storage: awilix.asClass(InFileStorage) to: fileRepository: awilix.asClass(FileRepository, { lifetime: awilix.Lifetime.SINGLETON }), storage: awilix.asClass(InFileStorage) Producer will now save to data.json file, and API will read from that file as well.","title":"Development"},{"location":"development/#set-refresh-token-read-providers","text":"You can set order of REFRESH_TOKEN providers in /src/services/producer/container.ts for producer, and in /src/services/cli/container.ts for CLI tool: readProviders: [ container.resolve InEnvStorage ('inEnvStorage'), container.resolve InFileStorage ('inFileStorage'), container.resolve InRedisStorage ('inRedisStorage'), ], First .env file will be checked does it contain REFRESH_TOKEN , if not, next data.json file will be checked, and the last one will be redis storage. Feel free to change order of those providers, or creating new ones.","title":"Set refresh token read providers"},{"location":"development/#set-refresh-token-write-provider","text":"You can set REFRESH_TOKEN write provider in /src/services/cli/container.ts for CLI tool, and in /src/services/producer/container.ts for producer. Notice that producer will only have ability to save REFRESH_TOKEN when you run it locally, not in docker container - browser window will be opened automatically. writeProvider: container.resolve InEnvStorage ('inEnvStorage'), You can change it to one of those three storages: container.resolve InEnvStorage ('inEnvStorage') container.resolve InFileStorage ('inFileStorage') container.resolve InRedisStorage ('inRedisStorage') Feel free to add new providers.","title":"Set refresh token write provider"},{"location":"development/#change-translations-storage-from-redis-to-file","text":"By default, translations as saved in redis storage. In order to change translations storage to file. Open /src/services/producer/container.ts and change: storage: awilix.asClass(InRedisStorage) to: storage: awilix.asClass(InFileStorage) Open /src/services/api/container.ts and change: storage: awilix.asClass(InFileStorage) to: fileRepository: awilix.asClass(FileRepository, { lifetime: awilix.Lifetime.SINGLETON }), storage: awilix.asClass(InFileStorage) Producer will now save to data.json file, and API will read from that file as well.","title":"Change translations storage from redis to file"},{"location":"docker/","text":"docker-compose To proprely run API, you need to run redis storage and producer as well. It can be runned by docker-compose. First create docker-compose.yml file and paste in: version: '3' services: babelsheet-api: image: tsh/babelsheet-api env_file: - .env ports: - 3000:3000 depends_on: - redis babelsheet-producer: image: tsh/babelsheet-producer env_file: - .env depends_on: - redis redis: image: redis ports: - 6379:6379 Next, make sure you have proper .env file in the same directory, then run docker-compose up , and API should be working now. Redis To run redis as a docker container type docker run --name redis -p 6379:6379 redis Or run it from docker-compose.yml file by following command: docker-compose up redis Producer To run producer from docker-compose.yml file run following command: docker-compose up babelsheet-producer API To run API from docker-compose.yml file run following command: docker-compose up babelsheet-api","title":"Docker"},{"location":"docker/#docker-compose","text":"To proprely run API, you need to run redis storage and producer as well. It can be runned by docker-compose. First create docker-compose.yml file and paste in: version: '3' services: babelsheet-api: image: tsh/babelsheet-api env_file: - .env ports: - 3000:3000 depends_on: - redis babelsheet-producer: image: tsh/babelsheet-producer env_file: - .env depends_on: - redis redis: image: redis ports: - 6379:6379 Next, make sure you have proper .env file in the same directory, then run docker-compose up , and API should be working now.","title":"docker-compose"},{"location":"docker/#redis","text":"To run redis as a docker container type docker run --name redis -p 6379:6379 redis Or run it from docker-compose.yml file by following command: docker-compose up redis","title":"Redis"},{"location":"docker/#producer","text":"To run producer from docker-compose.yml file run following command: docker-compose up babelsheet-producer","title":"Producer"},{"location":"docker/#api","text":"To run API from docker-compose.yml file run following command: docker-compose up babelsheet-api","title":"API"},{"location":"how-it-works/","text":"For BabelSheet to know how to handle your translations, You need to stick with very simple spreadsheet markup. Metadata : ### - determines column with optional tags, each tag describes whole row, there might be more tags per row and they should be separated by a comma - determines column with translation key, there might be more such columns placed one after another, each column makes another key which is nested, e.g. CORE.LABELS or FRONT.HEADER.TITLE . locale, e.g. en_US , pl_PL and others - determines column with translations for specific locale Example: ### en pl CORE LABELS tag1, tag2 YES Yes Tak tag1 NO No Nie COMMON SMTH Something Co\u015b Nothing is more self-explanatory then a working example .","title":"How it works"},{"location":"services/","text":"CLI Command line tool is used to obtain REFRESH_TOKEN , as well as to generate translations files. Translations files are possible to generate in given formats: Android iOS JSON To run command line tools, you need to install it first: npm i -g babelsheet If you want to obtain REFRESH_TOKEN then see Generating refresh token Generating translations files To generate translations type: babelsheet generate [options] Remember to create .env file before generating translations. If you wont provide REFRESH_TOKEN in .env file or data.json file, babelsheet will automatically open browser to create such token, and save will save it in right storage - you can change read and write storages, check it here . Options --format (alias: -f ) (default: json ) Format type (android/ios/json). --path (alias: -p ) (default: . ) Path for saving files. --language (alias: -l ) Language code for generating translations only in given language. --filename (alias: -n ) (default: translations ) Filename of final translation file. --base (default: EN ) Base language for translations, Base.lproj folder on iOS format and values folder on android format. --merge Creates one file with all languages. --client_id Client id received from Google. Overwrite .env CLIENT_ID value. --client_secret Client secret received from Google. Overwrite .env CLIENT_SECRET value. --spreadsheet_id Spreadsheet ID from spreadsheet URL. Overwrite .env SPREADSHEET_ID value. ( see how to obtain ). --spreadsheet_name Sheet name. Overwrite .env SPREADSHEET_NAME value. ( see how to obtain ). --spreadsheet_name Url to which user should be redirected after receiving refresh token. Overwrite .env REDIRECT_URI value. ( see how to obtain ). --help Help menu. Examples babelsheet generate -f json -n my-own-en-translations -l en_US -p ./my-folder - generates english translations in my-own-en-translations.json file inside ./my-folder folder. babelsheet generate --format ios --path ./translations - generates translations in iOS format in translations folder. Producer Producer is used to fetch translations file, convert it and then store it in a database. The process is wrapped in a scheduler which repeats the whole operation continuously every 5 minutes. Please note that if there are no proper environment variables such as CLIENT_ID , CLIENT_SECRET and REFRESH_TOKEN then producer is not able to work properly. In such case it runs a command responsible for obtaining those keys. You can run Producer in docker container - see Docker . If you want to run producer locally, first remember about setting environment variables and running redis , next type: npm run dev-install npm run dev-start-producer Producer should be working now. You can change REFRESH_TOKEN read and write providers, check it here . You can also change translations storage from redis to file, check it here . API API is a web server built on top of express.js which serves translations. There is one endpoint available to obtain translations, which is /translations . Translations can be filtered by using: filters[] - e.g. calling /translations?filters[]=en_US.CORE will result in getting translations for en_US locale and section CORE . Other possibility is to use tag as a filter, e.g. /translations?filters[]=en_US.tag1 . format - translations can be served in json/android/ios formats, just add adtitional parameter e.g. /translations?filters[]=en_US.CORE format=android . You can run API in docker container - see Docker . If you want to run API locally, first remember about setting environment variables and running redis , next type: npm run dev-install npm run dev-start-api API should be working now. Usage curl -X GET -g 'http://localhost:3000/translations' curl -X GET -g 'http://localhost:3000/translations?filters[]=en_US.CORE' curl -X GET -g 'http://localhost:3000/translations?filters[]=en_US.CORE.LABELS format=android'","title":"Services"},{"location":"services/#cli","text":"Command line tool is used to obtain REFRESH_TOKEN , as well as to generate translations files. Translations files are possible to generate in given formats: Android iOS JSON To run command line tools, you need to install it first: npm i -g babelsheet If you want to obtain REFRESH_TOKEN then see Generating refresh token","title":"CLI"},{"location":"services/#generating-translations-files","text":"To generate translations type: babelsheet generate [options] Remember to create .env file before generating translations. If you wont provide REFRESH_TOKEN in .env file or data.json file, babelsheet will automatically open browser to create such token, and save will save it in right storage - you can change read and write storages, check it here . Options --format (alias: -f ) (default: json ) Format type (android/ios/json). --path (alias: -p ) (default: . ) Path for saving files. --language (alias: -l ) Language code for generating translations only in given language. --filename (alias: -n ) (default: translations ) Filename of final translation file. --base (default: EN ) Base language for translations, Base.lproj folder on iOS format and values folder on android format. --merge Creates one file with all languages. --client_id Client id received from Google. Overwrite .env CLIENT_ID value. --client_secret Client secret received from Google. Overwrite .env CLIENT_SECRET value. --spreadsheet_id Spreadsheet ID from spreadsheet URL. Overwrite .env SPREADSHEET_ID value. ( see how to obtain ). --spreadsheet_name Sheet name. Overwrite .env SPREADSHEET_NAME value. ( see how to obtain ). --spreadsheet_name Url to which user should be redirected after receiving refresh token. Overwrite .env REDIRECT_URI value. ( see how to obtain ). --help Help menu. Examples babelsheet generate -f json -n my-own-en-translations -l en_US -p ./my-folder - generates english translations in my-own-en-translations.json file inside ./my-folder folder. babelsheet generate --format ios --path ./translations - generates translations in iOS format in translations folder.","title":"Generating translations files"},{"location":"services/#producer","text":"Producer is used to fetch translations file, convert it and then store it in a database. The process is wrapped in a scheduler which repeats the whole operation continuously every 5 minutes. Please note that if there are no proper environment variables such as CLIENT_ID , CLIENT_SECRET and REFRESH_TOKEN then producer is not able to work properly. In such case it runs a command responsible for obtaining those keys. You can run Producer in docker container - see Docker . If you want to run producer locally, first remember about setting environment variables and running redis , next type: npm run dev-install npm run dev-start-producer Producer should be working now. You can change REFRESH_TOKEN read and write providers, check it here . You can also change translations storage from redis to file, check it here .","title":"Producer"},{"location":"services/#api","text":"API is a web server built on top of express.js which serves translations. There is one endpoint available to obtain translations, which is /translations . Translations can be filtered by using: filters[] - e.g. calling /translations?filters[]=en_US.CORE will result in getting translations for en_US locale and section CORE . Other possibility is to use tag as a filter, e.g. /translations?filters[]=en_US.tag1 . format - translations can be served in json/android/ios formats, just add adtitional parameter e.g. /translations?filters[]=en_US.CORE format=android . You can run API in docker container - see Docker . If you want to run API locally, first remember about setting environment variables and running redis , next type: npm run dev-install npm run dev-start-api API should be working now.","title":"API"},{"location":"services/#usage","text":"curl -X GET -g 'http://localhost:3000/translations' curl -X GET -g 'http://localhost:3000/translations?filters[]=en_US.CORE' curl -X GET -g 'http://localhost:3000/translations?filters[]=en_US.CORE.LABELS format=android'","title":"Usage"}]}